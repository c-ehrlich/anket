import '../styles/globals.css';
import type { AppProps } from 'next/app';
import { SessionProvider } from 'next-auth/react';
import {
  ColorScheme,
  ColorSchemeProvider,
  MantineProvider,
} from '@mantine/core';
import { useEffect, useState } from 'react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ReactQueryDevtools } from 'react-query/devtools';
import Head from 'next/head';
import { useLocalStorage } from '@mantine/hooks';
import AppShellWrapper from '../components/AppShellWrapper';
import mantineTheme from '../styles/mantineTheme';

function MyApp({ Component, pageProps: { session, ...pageProps } }: AppProps) {
  const queryClient = new QueryClient();

  const [colorScheme, setColorScheme] = useLocalStorage<ColorScheme>({
    key: 'anket-color-scheme',
    defaultValue: 'light',
  });
  const toggleColorScheme = (value?: ColorScheme) =>
    setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));

  // avoid hydration errors
  const [hasMounted, setHasMounted] = useState<boolean>(false);
  useEffect(() => setHasMounted(true), []);
  if (!hasMounted) return null;

  return (
    <QueryClientProvider client={queryClient}>
      <Head>
        <title>Anket - Easy Surveys</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <SessionProvider session={session}>
        <ColorSchemeProvider
          colorScheme={colorScheme}
          toggleColorScheme={toggleColorScheme}
        >
          <MantineProvider
            withGlobalStyles
            withNormalizeCSS
            theme={{ colorScheme, ...mantineTheme }}
          >
            <AppShellWrapper>
              <Component {...pageProps} />
            </AppShellWrapper>
          </MantineProvider>
        </ColorSchemeProvider>
      </SessionProvider>
      <ReactQueryDevtools position='bottom-right' />
    </QueryClientProvider>
  );
}

export default MyApp;
