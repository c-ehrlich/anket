generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Account {
//   id                 String    @id @default(cuid())
//   compoundId         String    @unique @map(name: "compound_id")
//   user               User      @relation(fields: [userId], references: [id])
//   userId             String    @map(name: "user_id")
//   provider         String    @map(name: "provider")
//   providerAccountId  String    @map(name: "provider_account_id")
//   refreshToken       String?   @map(name: "refresh_token")
//   accessToken        String?   @map(name: "access_token")
//   accessTokenExpires DateTime? @map(name: "access_token_expires")
//   createdAt          DateTime  @default(now()) @map(name: "created_at")
//   updatedAt          DateTime  @default(now()) @map(name: "updated_at")

//   @@index([providerAccountId], name: "providerAccountId")
//   @@index([provider], name: "provider")
//   @@index([userId], name: "userId")
//   @@map(name: "accounts")
// }

// model Session {
//   id           String   @id @default(cuid())
//   user         User     @relation(fields: [userId], references: [id])
//   userId       String   @map(name: "user_id")
//   expires      DateTime
//   sessionToken String   @unique @map(name: "session_token")
//   accessToken  String   @unique @map(name: "access_token")
//   createdAt    DateTime @default(now()) @map(name: "created_at")
//   updatedAt    DateTime @default(now()) @map(name: "updated_at")

//   @@map(name: "sessions")
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime? @map(name: "email_verified")
//   image         String?
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @default(now()) @map(name: "updated_at")
//   sessions      Session[]
//   accounts      Account[]

//   @@map(name: "users")
// }

// model VerificationRequest {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now()) @map(name: "created_at")
//   updatedAt  DateTime @default(now()) @map(name: "updated_at")

//   @@map(name: "verification_requests")
// }
