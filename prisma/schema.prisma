generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdProducts      Product[]             @relation(name: "CreatedProducts")
  surveys              Survey[]
  surveyParticipations SurveyParticipation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([identifier, token])
}

model Product {
  id        String   @id @default(cuid())
  name      String
  creatorId String
  likedById String[]
  creator   User     @relation(name: "CreatedProducts", fields: [creatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Survey {
  id          String  @id @default(cuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  author         User                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  participations SurveyParticipation[]
  questions      Question[]

  // TODO add indexes
}

model Question {
  id           String       @id @default(cuid())
  question     String
  details      String?
  isRequired   Boolean      @default(true)
  questionType QuestionType

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  multipleChoiceOptions MultipleChoiceOption[]

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String

  questionResponese QuestionResponse[]

  // TODO add indexes
}

enum QuestionType {
  multipleChoiceSingle
  multipleChoiceMultiple
  yesNoBoolean
  zeroToTen
  textResponse
}

model MultipleChoiceOption {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  questionResponses QuestionResponse[]
}

model QuestionResponse {
  id String @id @default(cuid())

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  surveyParticipation   SurveyParticipation @relation(fields: [surveyParticipationId], references: [id], onDelete: Cascade)
  surveyParticipationId String

  isAnonymous Boolean @default(false)

  answerBoolean          Boolean?
  answerNumeric          Int?
  answerText             String?
  multipleChoiceOption   MultipleChoiceOption? @relation(fields: [multipleChoiceOptionId], references: [id], onDelete: SetNull)
  multipleChoiceOptionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([surveyParticipationId, questionId])
}

model SurveyParticipation {
  id String @id @default(cuid())

  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  questionResponses QuestionResponse[]

  isComplete  Boolean
  isAnonymous Boolean

  createdAt DateTime
  updatedAt DateTime

  @@unique([userId, surveyId])
}
